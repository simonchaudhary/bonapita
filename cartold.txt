import { useEffect, useState } from "react";
import Select from "react-select";
import axios from "axios";
import { useDispatch, useSelector } from "react-redux";
import { useHistory, useParams, withRouter } from "react-router-dom";
import StripeCheckout from "react-stripe-checkout";
import { v4 as uuidv4 } from "uuid";

// Icons
import { IconButton } from "@material-ui/core";
import ArrowBackIosIcon from "@material-ui/icons/ArrowBackIos";
import CloseRoundedIcon from "@material-ui/icons/CloseRounded";

// Actions
import {
	addItemToCartAction,
	addSpecialInstructionToItemAction,
	removeItemToCartAction,
	emptyCartAction,
	saveQRDetailAction,
} from "../../Redux/actions";

// Components
import {
	Header,
	CartContainer,
	HorizontalLine,
	CartFooter,
	CheckoutSummary,
	Column,
	Instruction,
	ItemContainer,
	ItemList,
	ModalTitle,
	Name,
	Row,
	TagRow,
	TagFilterContainer,
	FilterContainer,
} from "./CartStyle";
import RankDisplay from "./RankDisplay/RankDisplay";
import CartHeader from "./CartHeader/CartHeader";
import CartBody from "./CartBody/CartBody";
import ButtonNLoading from "../../components/buttons/ButtonNLoading";
import { PrimaryButton } from "../../components/buttons/buttons";
import CardVertical from "../../components/CustomCards/CardVertical/CardVertical";
import CardHorizontal from "../../components/CustomCards/CardHorizontal/CardHorizontal";
import { Horizontal } from "../../components/elements/elements";
import InputWrapper from "../../components/input/InputWrapper";
import FullPageLoading from "../../components/Loading/FullPageLoading";
import Modals from "../../components/modal/Modals";
import { Detail, Title } from "../../components/texts/texts";
import ToastBar from "../../components/ToastBar";

function Cart() {
	console.log("Cart");

	// Initilization
	const dispatch = useDispatch();
	const history = useHistory();
	const { Toast } = ToastBar();

	// Route Param
	const { providerId } = useParams();
	const { channel } = useParams();

	// Redux State
	const user = useSelector((state) => state.user.user);
	const cart = useSelector((state) => state.cart.cart);
	const QR = useSelector((state) => state.QR);
	const Order = useSelector((state) => state.Order);
	const provider = useSelector((state) => state.menus.provider);

	// Hooks
	const [subTotal, setSubTotal] = useState(null);
	const [totalPrice, setTotalPrice] = useState(null);
	const [tax, setTax] = useState(null);
	const [selectedItem, setSelectedItem] = useState(null);

	// UI
	const [selectedTag, setSelectedTag] = useState("all");
	const [orderId, setOrderId] = useState(null);
	const [stripePayLoading, setStripePayLoading] = useState(false);
	const [isPay, setIsPay] = useState(null);
	const [isLoading, setIsLoading] = useState(false);
	const [updateState, setUpdateState] = useState(false);
	const [isOpenModal, setIsOpenModal] = useState(false);
	const [specialInstruction, setSpecialInstruction] = useState("");
	const [specialInstructionError, setSpecialInstructionError] = useState("");
	const specialInstructionFocus = () => {
		setSpecialInstructionError("");
	};
	const [gratuity, setGratuity] = useState(15);
	const [gratuityError, setgratuityError] = useState("");
	const [isGratuityPositive, setIsGratuityPositive] = useState(true);
	const [whichModal, setWhichModal] = useState("");
	const [totalPriceAfterGratuity, setTotalPriceAfterGratuity] = useState(0);

	// Functions
	const gratuityFocus = () => {
		setgratuityError("");
	};
	const close = () => {
		setIsOpenModal(!isOpenModal);
		setIsLoading(false);
	};

	useEffect(() => {
		getTotalPrice();
	}, [updateState]);

	useEffect(() => {
		getProviderSetting();
	}, []);

	const getProviderSetting = () => {
		axios
			.get(
				"https://us-central1-afoodie-6d649.cloudfunctions.net/provider/" +
					providerId
			)
			.then((res) => {
				console.log("Response get Provider detail", res);
				if (res.data.success) {
					let payFirst = res.data.data.provider.payFirst;
					if (payFirst === undefined) {
						setIsPay(false);
					} else {
						setIsPay(res.data.data.provider.payFirst);
					}
				}
			})
			.catch((err) => {
				console.error("Error get Provider detail", err.response);
			});

		// axios
		// 	.get(
		// 		"https://us-central1-afoodie-6d649.cloudfunctions.net/provider/" +
		// 			providerId +
		// 			"/pay-first"
		// 	)
		// 	.then((res) => {
		// 		console.log("Response payfirst", res);
		// 		if (res.data.success) {
		// 			let payFirst = res.data.data.payFirst;
		// 			if (payFirst === undefined) {
		// 				setIsPay(false);
		// 			} else {
		// 				setIsPay(res.data.data.payFirst);
		// 			}
		// 		}
		// 	})
		// 	.catch((err) => {
		// 		console.error("Error payfirst", err);
		// 	});
	};
	const getTotalPrice = () => {
		let subTotal = 0;
		let totalPrice = 0;
		let Totaltax = 0;
		let totalTaxAmount = 0;
		cart?.map((item, i) => {
			subTotal = Number(item.price) + subTotal;
			let tax = 0;
			if (item.tax === null) {
				tax = 0;
			} else {
				tax = item?.tax?.replace("%", "");
			}
			let taxAmount = Number(item.price) * (Number(tax) / 100);
			totalTaxAmount = taxAmount + totalTaxAmount;
		});
		setSubTotal(subTotal);
		setTotalPrice(subTotal + totalTaxAmount);
		console.log(Totaltax);
		setTax(totalTaxAmount);
	};

	const orderNow = () => {
		setIsLoading(true);

		// setStripePayLoading(true);

		if (Order.channel === "Customer") {
			let cartItem = [];
			// Order Item Details
			cart?.map((item, i) => {
				let data = {
					imageUrl: item.imageUrl,
					itemName: item.itemName,
					itemId: item.itemId,
					itemStatus: item.itemStatus,
					prepLine: item.prepLine,
					price: item.price,
					specialInstruction: item.specialInstructions,
					tax: item.tax,
				};
				cartItem.push(data);
			});
			const data = {
				customerId: user.uid,
				providerId: Order.providerId,
				channel: "Customer",
				deliveryMode:
					"to be delivered by third party, to be delivered by the provider, customer will pickup",
				items: cartItem,
				orderStatus: "submit",
			};
			console.log("create customer order data", data);
			axios
				.post(
					"https://us-central1-afoodie-6d649.cloudfunctions.net/order/add-order",
					data
				)
				.then((response) => {
					if (response.data.success) {
						console.log("Response Add order ", response.data.data);
						Toast("Customer Order Created", "success");
						setWhichModal("checkoutSummaryModal");
						setIsLoading(false);
						// setIsOpenModal(true);
					}
				})
				.catch((error) => {
					console.log("Error Add Order", error);
					setIsLoading(false);
				});
		} else {
			// Create Order
			let cartItem = [];
			// Order Item Details
			cart?.map((item, i) => {
				let data = {
					imageUrl: item.imageUrl,
					itemName: item.itemName,
					itemId: item.itemId,
					itemStatus: item.itemStatus,
					prepLine: item.prepLine,
					price: item.price,
					specialInstruction: item.specialInstructions,
					tax: item.tax,
				};
				cartItem.push(data);
			});
			const data = {
				customerId: user.uid,
				providerId: providerId,
				channel: "QR code",
				area: QR?.qrDetail.areaId,
				section: QR?.qrDetail.sectionId,
				table: QR?.qrDetail.tableId,
				deliveryMode:
					"to be delivered by third party, to be delivered by the provider, customer will pickup",
				items: cartItem,
				orderStatus: "submit",
				orderType: QR?.orderType,
				guestId: QR?.selectedGuest,
			};
			console.log("create qrorder data", data);
			axios
				.post(
					"https://us-central1-afoodie-6d649.cloudfunctions.net/qr/v3/orders",
					data
				)
				.then((res) => {
					console.log("Response qrorder v3", res);
					// setIsLoading(false);
					// setIsOpenModal(true);

					// dispatch(emptyCartAction());
					Toast("QR Order Created", "success");
					setWhichModal("checkoutSummaryModal");
					setIsLoading(false);
					dispatch(emptyCartAction());
				})
				.catch((err) => {
					console.error("Error qrorder v3", err.response);
					setIsLoading(false);
				});
		}
	};

	const addSpecialInstruction = () => {
		if (specialInstruction === "") {
			setSpecialInstructionError("Provide some instruction");
		} else {
			// setIsLoading(true);
			const data = {
				specialInstruction: specialInstruction,
				item: selectedItem,
			};
			console.log(data);
			dispatch(addSpecialInstructionToItemAction(data));
			setSpecialInstruction("");
			setIsOpenModal(false);
			setCartController(!cartController);
		}

		// const data = {
		// 	specialInstruction: specialInstruction,
		// 	id: selectedItem.id,
		// };
		// console.log(data);
		// axios
		// 	.put(
		// 		"https://us-central1-afoodie-6d649.cloudfunctions.net/order/" +
		// 			orderId +
		// 			"/special-instruction",
		// 		data
		// 	)
		// 	.then((response) => {
		// 		console.log("Response Specialinstruction", response);
		// 		if (response.data.success) {
		// 			setIsLoading(false);
		// 			Toast("Special Instruction Added", "success");
		// 			setIsOpenModal(!isOpenModal);
		// 		}
		// 	})
		// 	.catch((error) => {
		// 		console.log("Error specialinsruction", error);
		// 	});
	};

	const showIsPay = () => {
		return (
			<div style={{ width: "120px" }}>
				{isPay ? (
					<ButtonNLoading
						onClick={addGratuity}
						title="Pay"
						isLoading={isLoading}
					/>
				) : isPay === false ? (
					<ButtonNLoading
						style={{ width: "100px" }}
						onClick={addGratuity}
						title="Order"
						color="white"
						// isLoading={isLoading}
					/>
				) : isPay === null ? (
					<p>Loading</p>
				) : null}
			</div>
		);
	};

	// create QRorder
	const createQROrder = (token) => {
		// Create Order
		let cartItem = [];
		// Order Item Details
		cart?.map((item, i) => {
			let data = {
				imageUrl: item.imageUrl,
				itemName: item.itemName,
				itemId: item.itemId,
				itemStatus: item.itemStatus,
				prepLine: item.prepLine,
				price: item.price,
				specialInstruction: item.specialInstructions,
				tax: item.tax,
				displayRank: item.displayRank,
			};
			cartItem.push(data);
		});

		const data = {
			customerId: user.uid,
			providerId: providerId,
			channel: "QR code",
			area: QR?.qrDetail.areaId,
			section: QR?.qrDetail.sectionId,
			table: QR?.qrDetail.tableId,
			deliveryMode:
				"to be delivered by third party, to be delivered by the provider, customer will pickup",
			items: cartItem,
			orderStatus: "submit",
			orderType: QR?.orderType,
			guestId: QR?.selectedGuest,
		};

		console.log("create qrorder data", data);
		axios
			.post(
				"https://us-central1-afoodie-6d649.cloudfunctions.net/qr/v3/orders",
				data
			)
			.then((res) => {
				console.log("Response qrorder v3", res);
				let orderId = res.data.data.id;
				stripeApi(orderId, token);
			})
			.catch((err) => {
				console.error("Error qrorder v3", err.response);
				setStripePayLoading(false);
			});
	};

	const stripeApi = (orderId, token) => {
		console.log("stripeApi", token);
		let data = {
			stripeToken: token.id,
			amount: parseInt(totalPriceAfterGratuity * 100),
			orderId: orderId,
			providerId: providerId,
			customerId: user.uid,
			email: token.email,
		};
		console.log("strip api data", data);
		axios
			.post(
				"https://us-central1-afoodie-6d649.cloudfunctions.net/stripe/charge",
				data
			)
			.then((response) => {
				console.log("Response Stripe Pay", response);
				if (response.data.success) {
					stripPayment(response.data.data.paymentData, orderId);
				}
			})
			.catch((err) => {
				console.error("Error Stripe Pay", err.response);
				setStripePayLoading(false);
				// setIsLoading(false);
			});
	};

	// create Customer
	const createCustomerOrder = (token) => {
		console.log("createcustomerorder function", token);
		// stripeApi("orderididid", token);
		setStripePayLoading(true);
		let cartItem = [];
		// Order Item Details
		cart?.map((item, i) => {
			let data = {
				imageUrl: item.imageUrl,
				itemName: item.itemName ?? item.name,
				itemId: item.itemId,
				itemStatus: item.itemStatus,
				prepLine: item.prepLine,
				price: item.price,
				specialInstruction: item.specialInstructions,
				tax: item.tax,
				displayRank: item.displayRank,
			};
			cartItem.push(data);
		});
		const data = {
			customerId: user.uid,
			providerId: Order.providerId,
			channel: "Customer",
			deliveryMode:
				"to be delivered by third party, to be delivered by the provider, customer will pickup",
			items: cartItem,
			orderStatus: "submit",
		};
		console.log("create customer order data", data);
		axios
			.post(
				"https://us-central1-afoodie-6d649.cloudfunctions.net/order/add-order",
				data
			)
			.then((response) => {
				if (response.data.success) {
					console.log("Response Add order ", response.data.data);
					let orderId = response.data.data.id;
					setOrderId(orderId);

					//remove selectsearchitem
					// dispatch(selectSearchItemNDetailsAction(null));
					stripeApi(orderId, token);
				}
			})
			.catch((error) => {
				console.log("Error Add Order", error);
				setStripePayLoading(false);
			});
	};

	// Stripe
	function handleToken(token, address) {
		console.log({ token });
		setIsOpenModal(false);
		setWhichModal("checkoutSummaryModal");
		setStripePayLoading(true);

		if (Order.channel === "Customer") {
			createCustomerOrder(token);
		} else {
			createQROrder(token);
		}
	}

	const stripPayment = (paymentData, orderId) => {
		const data = {
			payment: paymentData,
		};
		console.log("stripe payment data", data);
		axios
			.post(
				"https://us-central1-afoodie-6d649.cloudfunctions.net/payments",
				data
			)
			.then((response) => {
				console.log("Response add Strip Payment", response);
				if (response.data.success) {
					updateOrderStatus(orderId);
					updateOrderTranstionId(orderId, paymentData.transactionId);
				}
			})
			.catch((error) => {
				console.error("Error  add Strip Payment", error.response);
				setStripePayLoading(false);
				// setIsLoading(false);
			});
	};

	const updateOrderTranstionId = (orderId, transactionId) => {
		const data = {
			transactionId: transactionId,
		};
		axios
			.put(
				"https://us-central1-afoodie-6d649.cloudfunctions.net/order/" +
					orderId,
				data
			)
			.then((res) => {
				console.log("Response updateordertranstionid", res);
			})
			.catch((err) => {
				console.error("Response updateordertranstionid", err.response);
			});
	};

	const updateOrderStatus = (orderId) => {
		const data = {
			orderStatus: "paid",
			updatedBy: user.email,
		};
		console.log("update order status data", data);
		axios
			.put(
				"https://us-central1-afoodie-6d649.cloudfunctions.net/order/" +
					orderId +
					"/update-order-status",
				data
			)
			.then((response) => {
				console.log("Response updateorderstatus", response);
				if (response.data.success) {
					dispatch(saveQRDetailAction(null));
					setStripePayLoading(false);
					setIsOpenModal(true);
					// setIsLoading(false);
					Toast("Order has been Paid", "success");

					// history.replace("/home/customer");
				}
			})
			.catch((error) => {
				console.log("Error updateorderstatus", error);
				setStripePayLoading(false);
			});
	};

	const createQrOrder = () => {};

	const addGratuity = () => {
		setWhichModal("gratuityModal");
		setGratuity(15);
		let total = Number(totalPrice) + (Number(gratuity) / 100) * subTotal;
		setTotalPriceAfterGratuity(total);
		setIsOpenModal(true);

		// if (gratuity === 0) {
		// 	setgratuityError("Please enter more than 0");
		// } else {
		// 	console.log("totalprice", totalPrice, typeof gratuity);
		// 	setIsLoading(true);
		// 	let totalAmount = (totalPrice + Number(gratuity)) * 100;
		// let data = {
		// 	stripeToken: stripeToken.id,
		// 	amount: parseInt(totalAmount),
		// 	orderId: orderId,
		// 	providerId: providerId,
		// 	customerId: user.uid,
		// 	email: stripeToken.email,
		// };
		// console.log("strip api data", data);
		// axios
		// 	.post(
		// 		"https://us-central1-afoodie-6d649.cloudfunctions.net/stripe/charge",
		// 		data
		// 	)
		// 	.then((response) => {
		// 		console.log("Response Stripe Pay", response);
		// 		if (response.data.success) {
		// 			stripPayment(response.data.data.paymentData, orderId);
		// 		}
		// 	})
		// 	.catch((err) => {
		// 		console.error("Error Stripe Pay", err.response);
		// 		// setStripePayLoading(false);
		// 		setIsLoading(false);
		// 	});
		// }
	};

	useEffect(() => {
		let total = Number(totalPrice) + (Number(gratuity) / 100) * subTotal;
		setTotalPriceAfterGratuity(total);
	}, [gratuity]);

	const orderAgain = () => {
		console.log("Go to Order", orderId);
		history.replace(
			`/searchorder/${providerId}/${orderId}/Customer`
		);
	};

	// Display By Rank
	const [displayRankCart, setDisplayRankCart] = useState(null);
	const [cartController, setCartController] = useState(false);

	const [menuListByTag, setMenuListByTag] = useState(null);
	const [selectedMenuListByTag, setSelectedMenuListByTag] = useState(null);
	const [showSubmenuOrTagmenu, setShowSubmenuOrTagmenu] = useState("all");
	useEffect(() => {
		displayByRank();
	}, [cartController]);

	const displayByRank = () => {
		let cartList = cart;

		let vegAppetizers = [];
		let nonVegAppetizers = [];
		let soupAndSalad = [];
		let preFixedMealDineOnly = [];
		let vegetarianDelicacies = [];
		let chickenDelicacies = [];
		let lambDelicacies = [];
		let seaFoodDelicacies = [];
		let tandooriSizzlers = [];
		let riceVarieties = [];
		let naanVarieties = [];
		let desserts = [];
		let sides = [];
		let otherList = [];

		cartList.map((item, i) => {
			if (item.displayRank === 1) {
				vegAppetizers.push(item);
			} else if (item.displayRank === 2) {
				nonVegAppetizers.push(item);
			} else if (item.displayRank === 3) {
				soupAndSalad.push(item);
			} else if (item.displayRank === 4) {
				preFixedMealDineOnly.push(item);
			} else if (item.displayRank === 5) {
				vegetarianDelicacies.push(item);
			} else if (item.displayRank === 6) {
				chickenDelicacies.push(item);
			} else if (item.displayRank === 7) {
				lambDelicacies.push(item);
			} else if (item.displayRank === 8) {
				seaFoodDelicacies.push(item);
			} else if (item.displayRank === 9) {
				tandooriSizzlers.push(item);
			} else if (item.displayRank === 10) {
				riceVarieties.push(item);
			} else if (item.displayRank === 11) {
				naanVarieties.push(item);
			} else if (item.displayRank === 12) {
				desserts.push(item);
			} else if (item.displayRank === 13) {
				sides.push(item);
			} else {
				otherList.push(item);
			}
		});
		let data = [
			{
				subMenu: "Veg appetizers",
				items: vegAppetizers,
			},
			{
				subMenu: "Non-veg appetizers",
				items: nonVegAppetizers,
			},
			{
				subMenu: "Soup and salad",
				items: soupAndSalad,
			},
			{
				subMenu: "Pre-fixed meal (dine-in only)",
				items: preFixedMealDineOnly,
			},
			{
				subMenu: "Vegetarian delicacies",
				items: vegetarianDelicacies,
			},
			{
				subMenu: "Chicken delicacies",
				items: chickenDelicacies,
			},
			{
				subMenu: "Lamb delicacies",
				items: lambDelicacies,
			},
			{
				subMenu: "Seafood delicacies",
				items: seaFoodDelicacies,
			},
			{
				subMenu: "Tandoori sizzlers",
				items: tandooriSizzlers,
			},
			{
				subMenu: "Rice varieties",
				items: riceVarieties,
			},
			{
				subMenu: "Naan varieties",
				items: naanVarieties,
			},
			{
				subMenu: "Desserts",
				items: desserts,
			},
			{
				subMenu: "Sides",
				items: sides,
			},
			{
				subMenu: "Other",
				items: otherList,
			},
		];
		console.log("Data", data);
		setDisplayRankCart(data);
		filterByTag(cartList);
	};

	const print = (text) => {};

	function printOrder() {
		window.print();
	}

	const onFilterSelect = (item) => {
		console.log("onFilterSelect", item, menuListByTag);
		let selectedTag = item;
		setSelectedTag(item);
		if (item === "all") {
			setShowSubmenuOrTagmenu("all");
		} else {
			if (selectedTag === "Spicy") {
				setSelectedMenuListByTag(menuListByTag?.Spicy);
			} else if (selectedTag === "Vegan") {
				setSelectedMenuListByTag(menuListByTag?.Vegan);
			} else if (selectedTag === "Gluten free") {
				setSelectedMenuListByTag(menuListByTag?.["Gluten free"]);
			} else if (selectedTag === "Dairy free") {
				setSelectedMenuListByTag(menuListByTag?.["Dairy free"]);
			} else if (selectedTag === "Veg") {
				setSelectedMenuListByTag(menuListByTag?.Veg);
			} else if (selectedTag === "Non-Veg") {
				setSelectedMenuListByTag(menuListByTag?.["Non-Veg"]);
			}
			setShowSubmenuOrTagmenu("tagmenu");
		}
	};

	const filterByTag = (allItems) => {
		let tagItems = allItems.reduce((accumulator, currentValue) => {
			let tags = currentValue.tags;
			if (tags) {
				tags.forEach((tag) => {
					let subMenu = currentValue.sub_menu;
					if (accumulator.hasOwnProperty(tag)) {
						let list = accumulator[tag];
						let element = list.find((value) => value.subMenu === subMenu);
						if (element) {
							element.items.push(currentValue);
						} else {
							let json = {
								subMenu: subMenu,
								items: [currentValue],
							};
							list.push(json);
						}
					} else {
						let json = {
							subMenu: subMenu,
							items: [currentValue],
						};
						accumulator[tag] = [json];
					}
				});
			}
			return accumulator;
		}, {});
		console.log("ashish data new", tagItems);
		setMenuListByTag(tagItems);
	};

	return (
		<>
			{stripePayLoading ? <FullPageLoading /> : null}

			<Modals
				isOpen={isOpenModal}
				className={
					whichModal === "checkoutSummaryModal"
						? "checkoutSummery__modal"
						: "login__modal"
				}
			>
				<div className="close__modal">
					<IconButton>
						<CloseRoundedIcon onClick={close} />
					</IconButton>
				</div>
				{whichModal === "gratuityModal" ? (
					<>
						<Row style={{ width: "100%" }}>
							<Column style={{ width: "100%" }}>
								<Detail>Sub Total</Detail>
								<Title>{Number(subTotal)?.toFixed(2)}</Title>
								{/* <Detail>Total Price</Detail>
								<Title>{totalPrice?.toFixed(2)}</Title> */}
							</Column>
							<Column style={{ width: "100%" }}>
								<Detail>Gratuity</Detail>
								<Title>{gratuity}%</Title>
							</Column>
							<Column style={{ width: "100%" }}>
								<Detail>Total Price</Detail>
								<Title>
									{Number(totalPriceAfterGratuity).toFixed(2)}
								</Title>
								{/* <Detail>Total After Gratuity</Detail>
								<Title>{totalPriceAfterGratuity.toFixed(2)}</Title> */}
							</Column>
						</Row>
						<Horizontal />
						<Row style={{ width: "100%" }}>
							<div
								style={{
									width: "200px",
									display: "flex",
									alignItems: "center",
								}}
							>
								<InputWrapper
									// label="Gratuity"
									error={gratuityError}
									// prefixIcon={<EmailRoundedIcon />}
									onFocus={gratuityFocus}
									type="number"
									value={gratuity}
									onChangeText={(e) => {
										if (e.target.value <= -1) {
											setgratuityError("Enter positive number");
											setIsGratuityPositive(false);
											// setGratuity(e.target.value);
										} else {
											setgratuityError("");
											setIsGratuityPositive(true);
											setGratuity(e.target.value);
										}
									}}
								/>
								<Title>%</Title>
							</div>
						</Row>
						{isGratuityPositive ? (
							<>
								{isPay ? (
									<StripeCheckout
										stripeKey="pk_test_51InIyfAljeQoxwF8bEWEgokRJsqoam5DsBNXBdqA3NBACmVuzRyXV0YtfEELWf7zaKOdFxjYCnyktyEgOibrI0Nu0032A4LzDu"
										token={handleToken}
										// opened={opened}
										// billingAddress
										// shippingAddress
										// amount="500"
										// name={providerId}
									>
										<PrimaryButton>Make Payment</PrimaryButton>
									</StripeCheckout>
								) : (
									<ButtonNLoading
										style={{ width: "100px" }}
										onClick={orderNow}
										title="Order Now"
										color="white	"
										isLoading={isLoading}
									/>
								)}
							</>
						) : null}
					</>
				) : whichModal === "checkoutSummaryModal" ? (
					<CheckoutSummary>
						<ModalTitle>Checkout Summary</ModalTitle>
						<Title>Items</Title>
						<ItemList>
							{cart?.map((item) => (
								<ItemContainer
									style={{
										width: "100%",
										height: "auto",
										padding: "0.6rem",
										display: "flex",
										borderRadius: "0.4rem",
										marginButton: "0.6rem",
										justifyContent: "space-between",
									}}
								>
									<Title>{item.name}</Title>
									<Detail>{"$" + item.price}</Detail>
								</ItemContainer>
							))}
						</ItemList>

						<Row style={{ justifyContent: "space-between" }}>
							<Column>
								<Name>Sub Price </Name>
								<Instruction>
									{"$ "}
									{subTotal}
								</Instruction>
							</Column>
							<Column>
								<Name>Total Price </Name>
								<Instruction>
									{"$ "}
									{Number(totalPrice).toFixed(2)}
								</Instruction>
							</Column>
							<Column style={{ width: "160px" }}>
								<Name style={{ width: "100%" }}>
									Total After Gratuity
								</Name>
								<Instruction>
									{"$ "}
									{Number(totalPriceAfterGratuity).toFixed(2)}
								</Instruction>
							</Column>
						</Row>
						<Horizontal />
						<PrimaryButton onClick={orderAgain}>
							Go to Order
						</PrimaryButton>
					</CheckoutSummary>
				) : (
					<>
						<InputWrapper
							label="Special Instruction"
							error={specialInstructionError}
							// prefixIcon={<EmailRoundedIcon />}
							onFocus={specialInstructionFocus}
							type="text"
							value={specialInstruction}
							onChangeText={(e) => setSpecialInstruction(e.target.value)}
						/>
						<ButtonNLoading
							color="white"
							isLoading={isLoading}
							title="Add"
							onClick={addSpecialInstruction}
						/>
					</>
				)}
			</Modals>

			<CartContainer>
				<CartHeader
					onFilterSelect={onFilterSelect}
					selectedTag={selectedTag}
					printOrder={printOrder}
				/>

				<CartBody
					showSubmenuOrTagmenu={showSubmenuOrTagmenu}
					selectedMenuListByTag={selectedMenuListByTag}
					setUpdateState={setUpdateState}
					updateState={updateState}
					setIsOpenModal={setIsOpenModal}
					setSelectedItem={setSelectedItem}
				/>

				<CartFooter>
					{cart?.length != 0 ? (
						<Row
							style={{
								width: "100%",
								alignItems: "center",
								justifyContent: "space-between",
							}}
						>
							<Column>
								<Name>Sub Total</Name>
								<Instruction>
									{"$ "}
									{subTotal}
								</Instruction>
							</Column>
							{/* <Column>
								<Name>Tax Amount</Name>
								<Instruction>
									{"$ "}
									{tax}
								</Instruction>
							</Column> */}
							<Column>
								<Name>Total Price </Name>
								<Instruction>
									{"$ "}
									{Number(totalPrice)?.toFixed(2)}
								</Instruction>
							</Column>
							{/* <button>hello</button> */}
							{showIsPay()}
						</Row>
					) : null}
				</CartFooter>
			</CartContainer>
		</>
	);
}

export default Cart;
